<?php

namespace Numa\CCCAdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CommandLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BatchxRepository extends EntityRepository
{

    public function getProbills($batch1, $batch2)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();
        $qb->select('p')->distinct()
            ->add('from', 'NumaCCCAdminBundle:Probills p');
        $qb->orWhere('p.batchId=:id1');
        $qb->orWhere('p.batchId=:id2');
        $qb->setParameter('id1', $batch1);
        $qb->setParameter('id2', $batch2);
        $qb->orderBy("p.customersId");
        $probills = $qb->getQuery()->getResult();
        return $probills;

    }

    public function prepareComparisionData($batch1)
    {
        $sql = "SELECT p.customers_id,sum(p.total) as total,sum(p.gross) as gross,p.batch_x_id as batch, c.Name, c.custcode
FROM `Probills` p
JOIN Customers c on c.id=p.customers_id
where batch_x_id=".$batch1." group by p.customers_id
order by c.custcode";

        $res = $this->getEntityManager()->getConnection()->fetchAll($sql);
        //dump($res);
        return $res;
    }

    public function prepareComparisionCustomers($batch1,$batch2)
    {
        $sql = "SELECT p.customers_id,sum(p.total) as total,sum(p.gross) as gross,p.batch_x_id as batch, c.Name, c.custcode,b.working_days
FROM `Probills` p
left JOIN Customers c on c.id=p.customers_id
left JOIN batchX b on b.id=p.batch_x_id
where batch_x_id in (".$batch1.",".$batch2.") group by p.customers_id,b.id
order by c.name";

        $res = $this->getEntityManager()->getConnection()->fetchAll($sql);

        $comparisionArray=array();

        foreach($res as $cust){
            $b=1;
            if($cust['batch']==$batch2){
                $b=2;
            }
            $cust['average'] = empty($cust['working_days'])?0:$cust['total']/$cust['working_days'];
            $comparisionArray[$cust['custcode']][$b][]=$cust;
            if($batch1==$batch2){
                $comparisionArray[$cust['custcode']][1][]=$cust;
            }
        }
        $custGroups = array();

        foreach($comparisionArray as $key=>$cust){
            if(!empty($cust[1]) && empty($cust[2])){
                $custGroups[1][$key]=$cust;
            }elseif(empty($cust[1]) && !empty($cust[2])){
                $custGroups[2][$key]=$cust;
            }elseif(!empty($cust[1]) && !empty($cust[2])){
                //dump($cust);die();
                if($cust[1][0]['average']>$cust[2][0]['average']){
                    $cust[2][0]['total']=$cust[2][0]['total']*-1;
                }
                if($cust[2][0]['total']>0){
                    $custGroups[3][$key]=$cust;
                }else{
                    $custGroups[4][$key]=$cust;
                }

            }

        }
////        //dump();die();
//        $sort = $custGroups[3];
////        dump( $custGroups[3]);
//        uasort($sort, function($a, $b) {
//            if($a[2][0]['total']==$b[2][0]['total']){
//                return 0;
//            }
//            //return
////            dump($a);
////            dump($b);
////            die();
//            return ($a[2][0]['total']<$b[2][0]['total']) ? $b[2][0]['total'] : $b[2][0]['total'];
//           // die();
//        });
//        dump($sort);
//        dump( $custGroups[3]);
//        $custGroups[3]=$sort;
//        //die();

        return $custGroups;
    }

}
