<?php

namespace Numa\CCCAdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CommandLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandLogRepository extends EntityRepository {

    public function findLastCommandLog($limit=10,$category="",$array=false) {
        $qb = $this->getEntityManager()
                ->createQueryBuilder();
        $qb->select('cl')->distinct()
                ->add('from', 'NumaCCCAdminBundle:CommandLog cl')
                ->orderBy('cl.id', 'DESC')
                ->getMaxResults($limit);
        ;
        if(!empty($category)){
            $qb->andWhere('cl.category like :category');
            $qb->setParameter('category', "%".$category."%");
        }   
        

        $query = $qb->getQuery();
        if($array){
            return $query->getArrayResult();
        }
        return $query->getResult();
    }
    
    public function findEmailLog($batchid,$code=0) {
        $qb = $this->getEntityManager()
                ->createQueryBuilder();
        $qb->select('cl')->distinct()
                ->add('from', 'NumaCCCAdminBundle:CommandLog cl')
                ->orderBy('cl.id', 'DESC')
                
        ;        
        $qb->andWhere('cl.total_probills=:batchid');
        $qb->andWhere('cl.current_probill=:code');
        $qb->setParameter('batchid', $batchid);
        $qb->setParameter('code', $code);
          $qb->getMaxResults(1);
        $query = $qb->getQuery();
        $res = $query->getArrayResult();
        //dump($res[0]);die();
        if(!empty($res[0])){
            return $res[0];
        }
        return null;
    }
    
    public function findCommandRunning($commandName,$finished=true) {
        $qb = $this->getEntityManager()
                ->createQueryBuilder();
        $qb->select('cl')->distinct()
                ->add('from', 'NumaDOAAdminBundle:CommandLog cl')
                //->andWhere('cl.status like :status')
                //->andWhere('cl.ended_at is not null')
                ->andWhere('cl.command like :command')
                ->setParameter('command', "'%".$commandName."%'")
                //->setParameter('status', "finished")
                ->orderBy('cl.id', 'DESC')
                ->getMaxResults(1);
        
        ;

        $query = $qb->getQuery();
        //return $query->getOneOrNullResult();
    }

    public function deleteProgressLog($batchid) {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();
        $qb->delete('cl')->distinct()
            ->add('from', 'NumaCCCAdminBundle:CommandLog cl')

        ;
        $qb->andWhere('cl.total_probills=:batchid');
        $qb->andWhere('cl.current_probill in (0,1,2,3)');
        $qb->setParameter('batchid', $batchid);
        $query = $qb->getQuery();
        $query->execute();
    }

}
