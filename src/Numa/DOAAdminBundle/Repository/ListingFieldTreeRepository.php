<?php

namespace Numa\DOAAdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;

/**
 * ListingFieldTreeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ListingFieldTreeRepository extends EntityRepository
{

    private $memcache;


    public function setMemcached($memcachce)
    {
        $this->memcache = $memcachce;
    }

    public function getJsonTreeModels($fieldId, $root = 1, $deep = 2)
    {
        $return = false;
        if ($this->memcache) {
            $return = $this->memcache->get('getJsonTreeModels' . $fieldId);
        }
        if ($return === false) {
            $qb = $this->getEntityManager()
                ->createQueryBuilder();
            $query = $qb->select('tp')
                ->from('NumaDOAAdminBundle:ListingFieldTree', 'tp')
                ->where('tp.listing_field_id=:field_id')
                ->setParameter('field_id', $fieldId)
                ->orderBy('tp.name', 'DESC')
                ->getQuery();;

            $results = $query->getResult();
            $jsonArray = array();
            foreach ($results as $res) {
                foreach ($res->getChildren() as $children) {
                    $name = str_replace(array("'", ".", ",", "}", "{", "\""), "", $children->getName());
                    $jsonArray[$res->getId()][] = array($children->getId() => $name);
                }
            }
            if ($this->memcache) {
                $this->memcache->set('getJsonTreeModels' . $fieldId, json_encode($jsonArray));
            }
            return json_encode($jsonArray);
        }
        return $return;
    }

    public function findAllBy($fieldId, $result = false, $byid = true)
    {

        $qb = $this->getEntityManager()
            ->createQueryBuilder();
        $qb->select('t')
            ->from('NumaDOAAdminBundle:ListingfieldTree', 't')
            //->join('NumaDOAAdminBundle:Listingfield', 'l')
            ->where('t.listing_field_id=:fieldid')
            ->andWhere('t.parent is NULL')
            ->orderBy('t.name', 'DESC')
            //->andWhere('t.caption like :property')
            ->setParameter('fieldid', $fieldId);;
        $res = array();
        if ($result) {
            $return = false;
            if ($this->memcache) {
                $return = $this->memcache->get('findAllByTree' . $fieldId);
            }
            if ($return === false) {
                $result = $qb->getQuery()->getResult();
                foreach ($result as $key => $value) {
                    if (!$byid) {
                        $res[$value->getName()] = $value->getName();
                    } else {
                        $res[$value->getId()] = $value->getName();
                    }
                }
                if ($this->memcache) {
                    $this->memcache->set('findAllByTree' . $fieldId, $res);
                }
                return $res;
            }
            return $return;
        }
//        ;
        //dump($qb->getQuery());die();
        return $qb;
    }

    /**
     *
     * @param type $propertyName
     * @param type $listing_field_id
     * @return type
     */
    public function findOneByValue($propertyName, $listing_field_id)
    {
        //$return = $this->get('memcache.default')->get('findOneByValueTreep' . $propertyName.:);
        //if ($return === false) {
        $q = 'SELECT t FROM NumaDOAAdminBundle:ListingfieldTree t WHERE
                    ( t.listing_field_id = :listing_field_id AND
                    (t.name like :propertyname  OR
                     t.name like :propertyname2     )) ';
        $query = $this->getEntityManager()
            ->createQuery($q)
            ->setParameter('listing_field_id',  $listing_field_id )
            ->setParameter('propertyname',  $propertyName )
            ->setParameter('propertyname2', "%" . $propertyName . "%")
            ->setMaxResults(1);

        $res = $query->getOneOrNullResult(); //getOneOrNullResult();
        return $res;
        //}
    }

}
