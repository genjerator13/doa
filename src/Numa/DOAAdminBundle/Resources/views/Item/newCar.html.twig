{% import "NumaDOASiteBundle::components.html.twig" as component %}
{% block content %}
    {% if entity.id is empty %}
        {% set id = 0 %}
    {% else %}
        {% set id = entity.id %}
    {% endif %}
    <div class="form-group">
        {{ form_label(form.stockNr, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.stockNr, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>

    <div class="form-group">
        {{ form_label(form.VIN) }}
        <div class="col-sm-3">
            {{ form_widget(form.VIN) }}
        </div>

        <div id="trim-select" class="form-group col-sm-3"></div>
        {% if is_granted("ROLE_DMS_USER") or is_granted("ROLE_ADMIN") or is_granted("ROLE_REGULAR_ADMIN_DMS")  or is_granted("ROLE_SALE3_DMS") or is_granted("ROLE_SALE2_DMS") or is_granted("ROLE_SALES") or is_granted("ROLE_SALE4_DMS") or is_granted("ROLE_SALE2_DEALER_GROUP_DMS") %}
            <div class="col-sm-3">
                <button id="vin_submit_button" type="button" class="vin btn btn-success">Decode Vin</button>
            </div>
        {% endif %}
    </div>
    <script type="text/javascript">
        function firstToUpperCase(str) {
            return str.substr(0, 1).toUpperCase() + str.substr(1);
        }

        $.fn.populateTrim = function (data) {

            var s = $("<select id=\"trim\" name=\"trim\" class=\"form-control\" />");

            $("<label for=\"trim\">Select Trims:</label>").appendTo(s);
            $.each(data, function (key, value) {
                trim = value['Trim Level'];
                $("<option />", {value: key, text: trim}).appendTo(s);
            });

            $(this).append(s);

        }
        $.fn.fillFields = function (data) {
            console.log("fillfield");
            itemfields = data['itemfields'];

            make = $('#numa_doaadminbundle_item_make');
            model = $('#numa_doaadminbundle_item_model');
            year = $('#numa_doaadminbundle_item_year');
            bodyStyle = $('#numa_doaadminbundle_item_bodyStyle');
            bodyDescription = $('#numa_doaadminbundle_item_bodyDescription');
            doors = $('#numa_doaadminbundle_item_doors');
            mpgCity = $('#numa_doaadminbundle_item_mpgCity');
            mpgHighway = $('#numa_doaadminbundle_item_mpgHighway');
            driveType = $('#numa_doaadminbundle_item_driveType');
            fuelType = $('#numa_doaadminbundle_item_fuelType');
            transmission = $('#numa_doaadminbundle_item_transmission');
            engine = $('#numa_doaadminbundle_item_engine');
            trim = $('#numa_doaadminbundle_item_trim');
            stockNumber = $('#numa_doaadminbundle_item_stockNr');
            if (data['Make']) {
                make.val(data['Make']);
            }
            if (data['Model']) {
                model.val(data['Model']);
            }
            if (data['Model Year']) {
                year.val(data['Model Year']);
            }
            if (data['Model Year']) {
                year.val(data['Model Year']);
            }
            if (data['Transmission-long']) {
                transmission.val(data['Transmission-long']);
            }
            if (data['Engine Type']) {
                engine.val(data['Engine Type']);
            }
            if (data['Trim Level']) {
                trim.val(data['Trim Level']);
            }
            if (data['Fuel Economy-highway']) {
                mpgHighway.val(data['Fuel Economy-highway']);
            }
            if (data['Fuel Economy-city']) {
                mpgCity.val(data['Fuel Economy-city']);
            }
            if (data['Body Style']) {
                bodyDescription.val(data['Body Style']);
            }
            if (data['Driveline']) {
                driveType.val(data['Driveline']);
            }
            if (data['Production Seq. Number']) {
                stockNumber.val(data['Production Seq. Number']);
            }
            if (!jQuery.isEmptyObject(data.categories) && !jQuery.isEmptyObject(data.categories.market) && (data.categories.market == "Wagon" || data.categories.market == "Van" || data.categories.market == "Truck" || data.categories.market == "SUV" || data.categories.market == "Sedan" || data.categories.market == "Hatchback" || data.categories.market == "Crossover" || data.categories.market == "Coupe" || data.categories.market == "Convertible")) {
                bodyStyle.val(data.categories.market);
            }
            else if (!jQuery.isEmptyObject(data.categories) && !jQuery.isEmptyObject(data.categories.vehicleType) && (data.categories.vehicleType == "Wagon" || data.categories.vehicleType == "Van" || data.categories.vehicleType == "Truck" || data.categories.vehicleType == "SUV" || data.categories.vehicleType == "Sedan" || data.categories.vehicleType == "Hatchback" || data.categories.vehicleType == "Crossover" || data.categories.vehicleType == "Coupe" || data.categories.vehicleType == "Convertible")) {
                bodyStyle.val(data.categories.vehicleType);
            }
            else if (!jQuery.isEmptyObject(data.categories) && !jQuery.isEmptyObject(data.categories.vehicleStyle) && (data.categories.vehicleStyle == "Wagon" || data.categories.vehicleStyle == "Van" || data.categories.vehicleStyle == "Truck" || data.categories.vehicleStyle == "SUV" || data.categories.vehicleStyle == "Sedan" || data.categories.vehicleStyle == "Hatchback" || data.categories.vehicleStyle == "Crossover" || data.categories.vehicleStyle == "Coupe" || data.categories.vehicleStyle == "Convertible")) {
                bodyStyle.val(data.categories.vehicleStyle);
            }
            if (!jQuery.isEmptyObject(data.numOfDoors)) {
                doors.val(data.numOfDoors);
            }
            if (!jQuery.isEmptyObject(data.engine) && !jQuery.isEmptyObject(data.engine.type)) {
                fuelType.val(firstToUpperCase(data.engine.type));
            }
//            $.each(itemfields,function( index, value ) {
//                checkboxId = "#numa_doaadminbundle_item_Itemfield_"+index+"_field_boolean_value";
//                //$(checkboxId).prop('checked', true);

            $(".feature-name").each(function (index, value) {
                //console.log(index);
                feature = $(this).html();
                //console.log(feature+":::");
                if ($.inArray(feature, itemfields) >= 0) {

                    $(this).prev().find("input").prop('checked', true);
                }
            })

        }
        var datax;
        var oldvin;
        $(document).ready(function () {

            //console.log(checkboxList);
            $(document).on('change', '#trim', function () {
                $('#details form').fillFields(datax[$(this).val()]);
                console.log($(this).val());
                {% if id>0 %}
                $.ajax({
                    type: "POST",
                    url: "{{ path("decode_vin_api_one_vehicle") }}",
                    data: {item_id:{{ id }}, num: $(this).val()},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Error");
                    }
                });
                {% endif %}

            });
            $('#vin_submit_button').click(function () {

                vin = $('#numa_doaadminbundle_item_VIN').val();

                oldvin = vin;
                $("#loading-indicator").css("display", "block");

                $.ajax({
                    type: "POST",
                    url: "{{ path("decode_vin_api") }}",
                    data: {vin: vin, item_id:{{ id }} },
                    success: function (data, textStatus, jqXHR) {
                        datax = data;
                        $('#trim-select').html("");


                        if (data.length == 1) {
                            $('#details form').fillFields(datax[0]);
                        } else {
                            $('#trim-select').populateTrim(data);
                        }
                        $("#loading-indicator").css("display", "hidden");
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Error, wrong VIN!");
                    }
                });
            });
        });
    </script>

    <div class="form-group">
        {{ form_label(form.make, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.make, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    {{ component.listingFieldInput(form.model,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.retail_price,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.price,"", "form-group","col-sm-9") }}
    <div class="form-group">
        {{ form_label(form.bi_weekly, 'Bi-weekly', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-2">
            {{ form_widget(form.bi_weekly, { 'attr': {'class': 'form-control'} }) }}
        </div>
        <div class="col-sm-1">
            <a class="btn btn-success" href="#" id="calculate">Calculate</a>
        </div>
        <div class="col-sm-3">
            <label class="col-md-6 control-label" for="biweeklyInterestRate">Interest Rate:</label>
            <div class="col-md-6">
                <input id="biweeklyInterestRate" name="biweeklyInterestRate" class="form-control"
                       value="{{ dealer.biweeklyInterestRate }}"
                       type="text">
            </div>
        </div>

        <div class="col-sm-3">
            <label class="col-md-6 control-label" for="biweeklyPmts">No of Pmts:</label>
            <div class="col-md-6">
                <input id="biweeklyPmts" name="biweeklyPmts" class="form-control" value="{{ dealer.biweeklyPmts }}"
                       type="text">
            </div>
        </div>
    </div>
    <script>
        $(document).on('blur', "#biweeklyInterestRate, #biweeklyPmts", function (e) {
            e.preventDefault()
            value = $(this).val();
            field = $(this).attr('name');
            updateDealer(field, value);
        });
        $(document).on('click', "#calculate", function (e) {
            e.preventDefault();
            interestRate = $("#biweeklyInterestRate").val();
            pmts = $("#biweeklyPmts").val();
            price = $("#numa_doaadminbundle_item_price").val();
            val = calculate(interestRate, pmts, price);
            console.log(interestRate)
            console.log(pmts)
            console.log(price)
            console.log(val)
            $("#numa_doaadminbundle_item_bi_weekly").val(val);
        });
        function updateDealer(field, value) {

            $.ajax(
                    {
                        url: '{{ path('catalogs_update_fields') }}',
                        type: "POST",
                        data: {'dealer_id':{{ dealer.id }} , 'field': field, 'value': value},
                        success: function (data, textStatus, jqXHR) {
                            //data: return data from server
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            //if fails
                        }
                    });
        }

        function calculate(interestRate, pmts, price) {
            //res = Math.ceil(PMT(interestRate / 12, pmts / 2, -1 * (price) / 2));
            res = Math.ceil(PMT(interestRate / 1200, pmts/2  , (-1 * (price)/2)));
            console.log(PMT(0.05/12,65,13745));
            return res.toFixed(2);
        }
        /*
        @param rate_per_period       The interest rate for the loan.
        * @param number_of_payments    The total number of payments for the loan in months.
        * @param present_value         The present value, or the total amount that a series of future payments is worth now;
        *                              Also known as the principal.
        * @param future_value          The future value, or a cash balance you want to attain after the last payment is made.
        *                              If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.
        * @param type                  Optional, defaults to 0. The number 0 (zero) or 1 and indicates when payments are due.
        *                              0 = At the end of period
        *                              1 = At the beginning of the period
        * @returns {number}
        */

//        function PMT(rate_per_period, number_of_payments, present_value, future_value, type){
//            future_value = typeof future_value !== 'undefined' ? future_value : 0;
//            type = typeof type !== 'undefined' ? type : 0;
//
//            if(rate_per_period != 0.0){
//                // Interest rate exists
//                var q = Math.pow(1 + rate_per_period, number_of_payments);
//                return -(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));
//
//            } else if(number_of_payments != 0.0){
//                // No interest rate, but number of payments exists
//                return -(future_value + present_value) / number_of_payments;
//            }
//
//            return 0;
//        }
        function PMT(i, n, p) {
            return i * p * Math.pow((1 + i), n) / (1 - Math.pow((1 + i), n));
        }

    </script>
    {{ component.listingFieldInput(form.mileage,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.trim,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.bodyStyle,"", "form-group","col-sm-9") }}
    <div id="sub_category_type" class="form-group hidden">
        <label id="labelType" class="col-sm-3 col-sm-2 control-label required"
               for="numa_doaadminbundle_item_sub_category_type">

        </label>
        <div class="col-sm-9">
            {{ form_widget(form.sub_category_type, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    {{ component.listingFieldInput(form.bodyDescription,"", "form-group","col-sm-9") }}
    <div class="form-group">
        {{ form_label(form.exteriorColor, 'Exterior Color', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.exteriorColor, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.interiorColor, 'Interior Color', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.interiorColor, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.doors, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.doors, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.engine, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.engine, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.transmission, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.transmission, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.fuelType, 'Fuel Type', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.fuelType, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.driveType, 'Drive Type', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.driveType, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    {{ component.listingFieldInput(form.mpgCity,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.mpgHighway,"", "form-group","col-sm-9") }}

    {{ component.listingFieldInput(form.iwNo,"", "form-group","col-sm-9") }}
    {% if dealer is defined and dealerService.isCommercialDealer(dealer) %}
        <script>
            document.getElementById("numa_doaadminbundle_item_bodyStyle").onchange = function () {
                insertSelects();
            };
            $(document).ready(function () {
                insertSelects();

            });
            function insertSelects() {

                var select = document.getElementById("numa_doaadminbundle_item_bodyStyle");
                var category = select.value;

                var options = [];
                if (category == "Truck") {
                    var options = ["Pickup", "Chassis Cab", "Flat Deck"];
                    document.getElementById("sub_category_type").classList.remove('hidden');
                    document.getElementById("labelType").innerHTML = "Truck Type";
                } else if (category == "Van") {
                    var options = ["Cube Van", "Cargo Van", "Passenger Van"];
                    document.getElementById("sub_category_type").classList.remove('hidden');
                    document.getElementById("labelType").innerHTML = "Van Type";
                } else {
                    document.getElementById("sub_category_type").classList.add('hidden');
                }

                var selectType = document.getElementById('numa_doaadminbundle_item_sub_category_type');

                document.getElementById('numa_doaadminbundle_item_sub_category_type').options.length = 0;
                for (var i = 0; i < options.length; i++) {
                    var opt = document.createElement('option');
                    opt.innerHTML = options[i];
                    opt.value = options[i];
                    {% if entity is defined and entity.subCategoryType is not null %}
                    if (options[i] == {{ entity.subCategoryType|json_encode()|raw }}) {
                        opt.selected = true;
                    }
                    {% endif %}
                    selectType.appendChild(opt);
                }
            }
            ;
        </script>
    {% endif %}
{% endblock %}
