{% import "NumaDOASiteBundle::components.html.twig" as component %}
{% block content %}
    {% if entity.id is empty %}
        {% set id = 0 %}
    {% else %}
        {% set id = entity.id %}
    {% endif %}
    <div class="form-group">
        {{ form_label(form.stockNr, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.stockNr, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>

    <div class="form-group">
        {{ form_label(form.VIN) }}
        <div class="col-sm-3">
            {{ form_widget(form.VIN) }}
        </div>

        <div id="trim-select" class="form-group col-sm-3"></div>
        <div class="col-sm-3">
            <button id="vin_submit_button" type="button" class="vin btn btn-success">Decode Vin</button>
        </div>
    </div>
    <script type="text/javascript">
        function firstToUpperCase(str) {
            return str.substr(0, 1).toUpperCase() + str.substr(1);
        }

        $.fn.populateTrim = function (data) {

            var s = $("<select id=\"trim\" name=\"trim\" class=\"form-control\" />");

            $("<label for=\"trim\">Select Trims:</label>").appendTo(s);
            $.each(data, function (key, value) {
                trim = value['Trim Level'];
                $("<option />", {value: key, text: trim}).appendTo(s);
            });

            $(this).append(s);

        }
        $.fn.fillFields = function (data) {
            console.log("fillfield");
            itemfields = data['itemfields'];
            console.log(data);
            make = $('#numa_doaadminbundle_item_make');
            model = $('#numa_doaadminbundle_item_model');
            year = $('#numa_doaadminbundle_item_year');
            bodyStyle = $('#numa_doaadminbundle_item_bodyStyle');
            bodyDescription = $('#numa_doaadminbundle_item_bodyDescription');
            doors = $('#numa_doaadminbundle_item_doors');
            mpgCity = $('#numa_doaadminbundle_item_mpgCity');
            mpgHighway = $('#numa_doaadminbundle_item_mpgHighway');
            driveType = $('#numa_doaadminbundle_item_driveType');
            fuelType = $('#numa_doaadminbundle_item_fuelType');
            transmission = $('#numa_doaadminbundle_item_transmission');
            engine = $('#numa_doaadminbundle_item_engine');
            trim = $('#numa_doaadminbundle_item_trim');
            stockNumber = $('#numa_doaadminbundle_item_stockNr');
            if (data['Make']) {
                make.val(data['Make']);
            }
            if (data['Model']) {
                model.val(data['Model']);
            }
            if (data['Model Year']) {
                year.val(data['Model Year']);
            }
            if (data['Model Year']) {
                year.val(data['Model Year']);
            }
            if (data['Transmission-long']) {
                transmission.val(data['Transmission-long']);
            }
            if (data['Engine Type']) {
                engine.val(data['Engine Type']);
            }
            if (data['Trim Level']) {
                trim.val(data['Trim Level']);
            }
            if (data['Fuel Economy-highway']) {
                mpgHighway.val(data['Fuel Economy-highway']);
            }
            if (data['Fuel Economy-city']) {
                mpgCity.val(data['Fuel Economy-city']);
            }
            if (data['Body Style']) {
                bodyDescription.val(data['Body Style']);
            }
            if (data['Driveline']) {
                driveType.val(data['Driveline']);
            }
            if (data['Production Seq. Number']) {
                stockNumber.val(data['Production Seq. Number']);
            }
            if (!jQuery.isEmptyObject(data.categories) && !jQuery.isEmptyObject(data.categories.market) && (data.categories.market == "Wagon" || data.categories.market == "Van" || data.categories.market == "Truck" || data.categories.market == "SUV" || data.categories.market == "Sedan" || data.categories.market == "Hatchback" || data.categories.market == "Crossover" || data.categories.market == "Coupe" || data.categories.market == "Convertible")) {
                bodyStyle.val(data.categories.market);
            }
            else if (!jQuery.isEmptyObject(data.categories) && !jQuery.isEmptyObject(data.categories.vehicleType) && (data.categories.vehicleType == "Wagon" || data.categories.vehicleType == "Van" || data.categories.vehicleType == "Truck" || data.categories.vehicleType == "SUV" || data.categories.vehicleType == "Sedan" || data.categories.vehicleType == "Hatchback" || data.categories.vehicleType == "Crossover" || data.categories.vehicleType == "Coupe" || data.categories.vehicleType == "Convertible")) {
                bodyStyle.val(data.categories.vehicleType);
            }
            else if (!jQuery.isEmptyObject(data.categories) && !jQuery.isEmptyObject(data.categories.vehicleStyle) && (data.categories.vehicleStyle == "Wagon" || data.categories.vehicleStyle == "Van" || data.categories.vehicleStyle == "Truck" || data.categories.vehicleStyle == "SUV" || data.categories.vehicleStyle == "Sedan" || data.categories.vehicleStyle == "Hatchback" || data.categories.vehicleStyle == "Crossover" || data.categories.vehicleStyle == "Coupe" || data.categories.vehicleStyle == "Convertible")) {
                bodyStyle.val(data.categories.vehicleStyle);
            }
            if (!jQuery.isEmptyObject(data.numOfDoors)) {
                doors.val(data.numOfDoors);
            }
            if (!jQuery.isEmptyObject(data.engine) && !jQuery.isEmptyObject(data.engine.type)) {
                fuelType.val(firstToUpperCase(data.engine.type));
            }
//            $.each(itemfields,function( index, value ) {
//                checkboxId = "#numa_doaadminbundle_item_Itemfield_"+index+"_field_boolean_value";
//                //$(checkboxId).prop('checked', true);
            console.log(itemfields);
            $(".feature-name").each(function (index, value) {
                //console.log(index);
                feature = $(this).html();
                //console.log(feature+":::");
                if ($.inArray(feature, itemfields) >= 0) {

                    $(this).prev().find("input").prop('checked', true);
                }
            })
//
//            $.each(itemfields,function( index, value ) {
//                if ($.inArray(value, checkboxList) >= 0) {
//                    console.log("AAAAAA" + value);
//                    //$(this).prev().find("input").prop('checked', true);
//                } else {
//                    console.log("BBBB" + value);
//                    clone = $(".features li:first-child").clone();
//                    clone.find(".feature-name").html(value);
//                    input = clone.find(".feature-checkbox input");
//                    input.prop('checked', true);
//                    iii="numa_doaadminbundle_item_Itemfield_"+(150+index)+"_field_boolean_value";
//                    nnn="numa_doaadminbundle_item[Itemfield]["+(150+index)+"][field_boolean_value]";
//                    input.attr("id",iii);
//                    input.attr("name",nnn);
//                    console.log(nnn);
//                    $(".features").append(clone);
//                }
//
//            });
//            else {
//                checkboxId = "#numa_doaadminbundle_item_Itemfield_" + index + "_field_boolean_value";

                //$(".features").append("::");
//            }
////            });

        }
        var datax;
        var oldvin;
        $(document).ready(function () {


            var checkboxList = $(".features li")
                    .map(function () {
                        return $(this).find(".feature-name").html();
                    })
                    .get()
                    ;
            //console.log(checkboxList);
            $(document).on('change', '#trim', function () {

                $('#details form').fillFields(datax[$(this).val()]);
            });
            $('#vin_submit_button').click(function () {

                vin = $('#numa_doaadminbundle_item_VIN').val();

                oldvin = vin;
                $("#loading-indicator").css("display", "block");

                $.ajax({
                    type: "POST",
                    url: "{{ path("decode_vin_api") }}",
                    data: {vin: vin, item_id:{{ id }} },
                    success: function (data, textStatus, jqXHR) {
                        datax = data;
                        $('#trim-select').html("");


                        if (data.length == 1) {
                            $('#details form').fillFields(datax[0]);
                        } else {
                            $('#trim-select').populateTrim(data);
                        }
                        $("#loading-indicator").css("display", "hidden");
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("Error, wrong VIN!");
                    }
                });
            });
        });
    </script>
    <div class="form-group">
        {{ form_label(form.make, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.make, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    {{ component.listingFieldInput(form.model,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.retail_price,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.price,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.mileage,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.trim,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.bodyStyle,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.bodyDescription,"", "form-group","col-sm-9") }}
    <div class="form-group">
        {{ form_label(form.exteriorColor, 'Exterior Color', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.exteriorColor, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.interiorColor, 'Interior Color', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.interiorColor, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.doors, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.doors, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.engine, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.engine, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.transmission, null, { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.transmission, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.fuelType, 'Fuel Type', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.fuelType, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    <div class="form-group">
        {{ form_label(form.driveType, 'Drive Type', { 'label_attr': {'class': 'col-sm-3'} }) }}
        <div class="col-sm-9">
            {{ form_widget(form.driveType, { 'attr': {'class': 'form-control'} }) }}
        </div>
    </div>
    {{ component.listingFieldInput(form.mpgCity,"", "form-group","col-sm-9") }}
    {{ component.listingFieldInput(form.mpgHighway,"", "form-group","col-sm-9") }}

    {{ component.listingFieldInput(form.iwNo,"", "form-group","col-sm-9") }}
{% endblock %}
