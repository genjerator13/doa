{# get the loged dealer #}
{% set apicall="/api/dmsuser/all" %}

{% if is_granted('ROLE_BUSINES') %}
    {% set user= app.security.getToken().getUser().getId() %}
    {% set apicall="/api/dmsuser/"~user~"/dealer" %}
{% endif %}
{% if is_granted('ROLE_ADMIN') and app.session.get('dealer') %}
    {% set user= app.session.get('dealer').getId() %}
    {% set apicall="/api/dmsuser/"~user~"/dealer" %}
{% endif %}
{% import 'NumaDOASiteBundle::components.html.twig' as component %}
var app = angular.module('app', ['angular-loading-bar', 'ngTouch', 'ngAnimate', 'ui.grid', 'ui.grid.moveColumns', 'ui.grid.resizeColumns', 'ui.grid.selection', 'ui.grid.expandable', 'ui.bootstrap', 'ui.grid.pinning']);

app.config(function ($interpolateProvider) {
    $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
});

app.controller('MainCtrl', ['$scope', '$http', '$log', '$timeout', 'uiGridConstants','$q','$uibModal', function ($scope, $http, $log, $timeout, uiGridConstants,$q,$uibModal) {
    $scope.gridOptions = {
        enableSorting: true,
        showGridFooter: true,
        enableFiltering: true,
        enableRowSelection: true,
        enableSelectAll: true,
        selectionRowHeaderWidth: 35,
        rowHeight: 35,
        enableColumnResizing: true,
    };
    $scope.gridOptions.multiSelect = true;
    $scope.gridOptions.columnDefs = [
        {name:'id', enableColumnResizing: true,width: 50},
        {name:'username',enableColumnResizing: true},
        {name:'_first_name',enableColumnResizing: true},
        {name:'_last_name',enableColumnResizing: true},
        {name:'_user_group.name',displayName:"User Group",enableColumnResizing: true},
        {name:'Actions',
            width: 100,
            enableColumnMenu: false,
            enableSorting:false,
            enableFiltering: false,
            cellTemplate: '<a href="/dms/dmsuser/{[{row.entity.id}]}/edit" class="btn btn-primary" data-toggle="tooltip" title="Edit">Edit</a>'

        }
    ];

    $scope.animationsEnabled = true;




    var canceler = $q.defer();
    $http.get('{{ apicall }}', {timeout: canceler.promise})
            .success(function (data) {
                $scope.gridOptions.data = data;
            });

    $scope.$on('$destroy', function () {
        canceler.resolve();  // Aborts the $http request if it isn't finished.
    });

    $scope.gridOptions.onRegisterApi = function (gridApi) {
        //set gridApi on scope
        $scope.gridApi = gridApi;
        gridApi.selection.on.rowSelectionChanged($scope, function (row) {
            var msg = 'row selected ' + row.isSelected;
            $log.log(msg);
        });

        gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
            var msg = 'rows changed ' + rows.length;
            $log.log(msg);
        });
    };
}]);
app.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, items) {

    $scope.items = items;
    $scope.selected = {
        item: $scope.items[0]
    };

    $scope.ok = function () {
        $uibModalInstance.close($scope.selected.item);
        return true;
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
});