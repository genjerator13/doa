{% set apicall="/api/archived_listings/all.json" %}
{% if dealer is not empty %}
{% set apicall="/api/archived_listings/"~dealer~"/dealer.json" %}
{% endif %}
{% import 'NumaDOASiteBundle::components.html.twig' as component %}
var app = angular.module('app', ['angular-loading-bar', 'ngTouch', 'ngAnimate', 'ui.grid', 'ui.grid.moveColumns', 'ui.grid.resizeColumns', 'ui.grid.selection', 'ui.grid.expandable', 'ui.bootstrap', 'ui.grid.pinning']);


app.config(function ($interpolateProvider) {
    $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
});
function getClassName(grid, row, col, columnName) {
    var className = "";
    if (row.entity['featured'] === "1" && row.entity['active'] === "1") {
        className = "featured";
    }
    return className;
}

app.controller('MainCtrl', ['$scope', '$http', '$log', '$timeout', 'uiGridConstants', '$q', '$uibModal', function ($scope, $http, $log, $timeout, uiGridConstants, $q, $uibModal) {
    $scope.gridOptions = {
        enableSorting: true,
        showGridFooter: true,
        showGridHeader: true,
        enableFiltering: true,
        enableRowSelection: true,
        enableSelectAll: true,
        selectionRowHeaderWidth: 35,
        rowHeight: 150,
        enableColumnResizing: true,

    };
    $scope.gridOptions.multiSelect = true;
    $scope.gridOptions.columnDefs = [
        {
            enableSorting: false,
            enableFiltering: false,
            name: 'photo',
            enableColumnResizing: true, width: 150,
            cellTemplate: '<a href="{% if is_granted('ROLE_BUSINES') and not(is_granted('ROLE_DMS_USER')) %}{{ path('items') }}{% else %}{{ path('inventory') }}{% endif %}{[{row.entity.id}]}/edit"><span ng-if="row.entity.photo !== \'\'"><img class="image-angular2" src="{[{row.entity.photo}]}" alt="{[{row.entity.name}]}" height="140px" width="140px" ></span></a>',
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'id',
            enableColumnResizing: true,
            width: 50,
            cellTemplate: '<a href="{% if is_granted('ROLE_BUSINES') and not(is_granted('ROLE_DMS_USER')) %}{{ path('items') }}{% else %}{{ path('inventory') }}{% endif %}{[{row.entity.id}]}/edit">{[{row.entity.id}]}</a>',
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'vin',
            displayName: 'VIN #',
            enableColumnResizing: true,
            width: 80,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'year',
            displayName: 'Year',
            enableColumnResizing: true,
            width: 50,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'make',
            enableColumnResizing: true,
            width: 80,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'model',
            enableColumnResizing: true,
            width: 100,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'stock_nr',
            enableColumnResizing: true,
            width: 80,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'status',
            enableColumnResizing: true,
            width: 50,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'category',
            displayName: 'Category',
            enableColumnResizing: true,
            width: 70,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'views',
            enableColumnResizing: true,
            width: 50,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'sold',
            enableColumnResizing: true,
            width: 65,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },

        },
        {
            name: 'type',
            enableColumnResizing: true,
            width: 100,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'date_created',
            enableColumnResizing: true,
            type: 'date',
            cellFilter: 'date:\'yyyy-MM-dd\'',
            width: 90,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'sold_date',
            enableColumnResizing: true,
            type: 'date',
            cellFilter: 'date:\'yyyy-MM-dd\'',
            width: 90,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'archived_date',
            enableColumnResizing: true,
            type: 'date',
            cellFilter: 'date:\'yyyy-MM-dd\'',
            width: 90,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'saleSellingPrice',
            displayName: "Sold For",
            enableColumnResizing: true,
            width: 90,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        },
        {
            name: 'saleTotalUnitCost',
            enableColumnResizing: true,
            displayName: "Total Unit Cost",
            width: 90,
            cellClass: function (grid, row, col, rowRenderIndex, colRenderIndex) {
                return 'other-cells ' + getClassName(grid, row, col, 'featured');
            },
        }
    ];

    $scope.items = ['item1', 'item2', 'item3'];
    $scope.selected = {};

    $scope.animationsEnabled = true;


    {#$scope.setActivate = function () {#}
        {#$log.log(JSON.stringify($scope.selected));#}
        {#$http.post('{{ path("dms_item_recover") }}', {'data': JSON.stringify($scope.selected)})#}
                {#.success(function (data) {#}

                    {#angular.forEach($scope.selected, function (value, key) {#}
                        {#$log.log(key + ': ' + value);#}
                        {#$scope.gridOptions.data[key - 1].active = 1;#}
                    {#});#}
                    {#$scope.selected = {}#}
                    {#$scope.gridApi.selection.clearSelectedRows();#}
                {#});#}
    {#}#}
    {#$scope.setDeactivate = function () {#}
        {#$log.log(JSON.stringify($scope.selected));#}
        {#$http.post('{{ path("dms_item_deactivate") }}', {'data': JSON.stringify($scope.selected)})#}
                {#.success(function (data) {#}
                    {#angular.forEach($scope.selected, function (value, key) {#}
                        {#$log.log(key + ': ' + value);#}
                        {#$scope.gridOptions.data[key - 1].active = 0;#}
                    {#});#}
                    {#$scope.selected = {}#}
                    {#$scope.gridApi.selection.clearSelectedRows();#}
                {#});#}
    {#}#}

    {#$scope.setFeatured = function () {#}
        {#$log.log(JSON.stringify($scope.selected));#}
        {#$http.post('{{ path("dms_item_featured") }}', {'data': JSON.stringify($scope.selected)})#}
                {#.success(function (data) {#}

                    {#angular.forEach($scope.selected, function (value, key) {#}
                        {#$log.log(key + ': ' + value);#}
                        {#$scope.gridOptions.data[key - 1].featured = 1;#}
                    {#});#}
                    {#$scope.selected = {}#}
                    {#$scope.gridApi.selection.clearSelectedRows();#}
                {#});#}
    {#}#}

    {#$scope.setKijiji = function () {#}
        {#$log.log(JSON.stringify($scope.selected));#}
        {#$http.post('{{ path("dms_item_kijiji") }}', {'data': JSON.stringify($scope.selected)})#}
                {#.success(function (data) {#}
                    {#angular.forEach($scope.selected, function (value, key) {#}
                        {#$scope.gridOptions.data[key - 1].featured = 1;#}
                    {#});#}
                    {#$scope.selected = {}#}
                    {#$scope.gridApi.selection.clearSelectedRows();#}
                {#});#}
    {#}#}

    $scope.setRecover = function () {
        selected = $scope.selected.filter(function (element) {
            return element !== undefined;
        });
        if (selected.length == 0) {
            return;
        }
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'myModalContent.html',
            controller: 'ModalInstanceCtrl',

            resolve: {
                items: function () {
                    return $scope.items;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            //ok
            $log.log(JSON.stringify($scope.selected));
        $http.post('{{ path("dms_item_recover") }}', {'data': JSON.stringify($scope.selected)})
                .success(function (data) {
                    apicall();
                });
        }, function () {
            //cancel
        });
    }



    var canceler = $q.defer();
    var apicall = function () {
        $http.get('{{ apicall }}', {timeout: canceler.promise})
                .success(function (data) {
                    $scope.selected = [];
                    angular.forEach(data, function (row, index) {

                        row.index = index + 1;

                        if (row.sold == 1) {
                            row.sold = "Sold"
                        } else {
                            row.sold = "Not"
                        }

                    })
                    $scope.gridOptions.data = data;

                });
    };
    apicall();

    $scope.$on('$destroy', function () {
        canceler.resolve();  // Aborts the $http request if it isn't finished.
    });

    $scope.gridOptions.onRegisterApi = function (gridApi) {
        //set gridApi on scope
        $scope.gridApi = gridApi;
        gridApi.selection.on.rowSelectionChanged($scope, function (row) {
            $scope.selected[row.entity.index-1] = undefined;
            if(row.isSelected){
                $scope.selected[row.entity.index-1] = row.entity.id;
            }
        });

        gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
            angular.forEach(rows, function (value, key) {
                $scope.selected[value.entity.index-1] =undefined;
                if(value.isSelected) {
                    $scope.selected[value.entity.index-1] = value.entity.id;
                }
            });
        });
    };
}]);

app.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, items) {

    $scope.items = items;
    $scope.selected = {
        item: $scope.items[0]
    };

    $scope.ok = function () {
        $uibModalInstance.close($scope.selected.item);
        return true;
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
});