{# get the loged dealer #}
{% set apicall="/api/part_request/all" %}
{% if dealer is not empty %}
{% set apicall="/api/part_request/"~dealer.id~"/dealer" %}
{% endif %}
{% import 'NumaDOASiteBundle::components.html.twig' as component %}
var app = angular.module('app', ['angular-loading-bar', 'ngTouch', 'ngAnimate', 'ui.grid', 'ui.grid.moveColumns', 'ui.grid.resizeColumns', 'ui.grid.selection', 'ui.grid.expandable', 'ui.bootstrap', 'ui.grid.pinning']);


app.config(function ($interpolateProvider) {
    $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
});

app.controller('MainCtrl', ['$scope', '$http', '$log', '$timeout', 'uiGridConstants', '$q', '$uibModal', function ($scope, $http, $log, $timeout, uiGridConstants, $q, $uibModal) {
    $scope.gridOptions = {
        enableSorting: true,
        showGridFooter: true,
        enableFiltering: true,
        enableRowSelection: true,
        enableSelectAll: true,
        selectionRowHeaderWidth: 35,
        rowHeight: 50,
        enableColumnResizing: true,
    };
    $scope.gridOptions.multiSelect = true;
    $scope.gridOptions.columnDefs = [
        {
            name: 'id',
            enableColumnResizing: true,
            width: 30,
            cellTemplate: '<a href="{[{row.entity.id}]}/show">{[{row.entity.id}]}</a>',

        },
        {name: 'cust_name', displayName: 'Name', enableColumnResizing: true, width: 100},
        {name: 'cust_last_name', displayName: 'Surname', enableColumnResizing: true, width: 100},
        {
            name: 'email',
            enableColumnResizing: true,
            width: 100,
            cellTemplate: '<a href="mailto:{[{row.entity.email}]}">{[{row.entity.email}]}</a>',
        },
        {name: 'phone', enableColumnResizing: true, width: 100},
        {name: 'make', enableColumnResizing: true, width: 100},
        {name: 'model', enableColumnResizing: true, width: 100},
        {name: 'year', enableColumnResizing: true, width: 55},
        {name: 'vin', enableColumnResizing: true, width: 100},
        {name: 'part_num', enableColumnResizing: true, width: 100},
        {name: 'part_desc', enableColumnResizing: true, width: 100},
        {name: 'comment', enableColumnResizing: true, width: 100},
    ];

    $scope.items = ['item1', 'item2', 'item3'];
    $scope.selected = [];

    $scope.animationsEnabled = true;

    $scope.setDelete = function () {
        selected = $scope.selected.filter(function (element) {
            return element !== undefined;
        });
        if (selected.length == 0) {
            return;
        }
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'myModalContent.html',
            controller: 'ModalInstanceCtrl',

            resolve: {
                items: function () {
                    return $scope.items;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            //ok
            $log.log(JSON.stringify($scope.selected));
            $http.post('{{ path("partrequest_mass_delete") }}', {'data': JSON.stringify(selected)})
                    .success(function () {
                        apicall();
                    });
        }, function () {
            //cancel
        });
    }

    var canceler = $q.defer();
    var apicall = function () {
        $http.get('{{ apicall }}', {timeout: canceler.promise})
                .success(function (data) {
                    $scope.selected = [];
                    angular.forEach(data, function (row, index) {
                        row.index = index + 1;
                    })
                    $scope.gridOptions.data = data;

                });
    };
    apicall();

    $scope.$on('$destroy', function () {
        canceler.resolve();  // Aborts the $http request if it isn't finished.
    });

    $scope.gridOptions.onRegisterApi = function (gridApi) {
        //set gridApi on scope
        $scope.gridApi = gridApi;
        gridApi.selection.on.rowSelectionChanged($scope, function (row) {
            $scope.selected[row.entity.index-1] = undefined;
            if(row.isSelected){
                $scope.selected[row.entity.index-1] = row.entity.id;
            }
        });

        gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
            angular.forEach(rows, function (value, key) {
                $scope.selected[value.entity.index-1] =undefined;
                if(value.isSelected) {
                    $scope.selected[value.entity.index-1] = value.entity.id;
                }
            });
        });
    };

}]);
app.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, items) {

    $scope.items = items;
    $scope.selected = {
        item: $scope.items[0]
    };

    $scope.ok = function () {
        $uibModalInstance.close($scope.selected.item);
        return true;
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
});