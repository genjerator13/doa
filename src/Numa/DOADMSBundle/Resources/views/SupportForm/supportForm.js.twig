{# get the loged dealer #}
{% set apicall="/api/support_form/all" %}
{% if dealer is not empty %}
{% set apicall="/api/support_form/"~dealer.id~"/dealer" %}
{% endif %}
{% import 'NumaDOASiteBundle::components.html.twig' as component %}
var app = angular.module('app', ['angular-loading-bar', 'ngTouch', 'ngAnimate', 'ui.grid', 'ui.grid.moveColumns', 'ui.grid.resizeColumns', 'ui.grid.selection', 'ui.grid.expandable', 'ui.bootstrap', 'ui.grid.pinning']);


app.config(function ($interpolateProvider) {
    $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
});

app.controller('MainCtrl', ['$scope', '$http', '$log', '$timeout', 'uiGridConstants', '$q', '$uibModal', function ($scope, $http, $log, $timeout, uiGridConstants, $q, $uibModal) {
    $scope.gridOptions = {
        enableSorting: true,
        showGridFooter: true,
        enableFiltering: true,
        enableRowSelection: true,
        enableSelectAll: true,
        selectionRowHeaderWidth: 35,
        rowHeight: 50,
        enableColumnResizing: true,
    };
    $scope.gridOptions.multiSelect = true;
    $scope.gridOptions.columnDefs = [
        {
            name: 'id',
            enableColumnResizing: true,
            width: 30,
            cellTemplate: '<a href="{[{row.entity.id}]}/edit">{[{row.entity.id}]}</a>',

        },
        {name: '_dealer.name', displayName: 'Dealer Name', enableColumnResizing: true},
        {name: 'dms_user_name', displayName: 'User Name', enableColumnResizing: true},
        {name: 'dms_user_group', displayName: 'User Group', enableColumnResizing: true, width: 100},
        {name: 'subject', enableColumnResizing: true},
        {name: 'message', enableColumnResizing: true, width: 300},
        {name: 'created_at', enableColumnResizing: true, width: 80, cellFilter: 'date:\'yyyy-MM-dd\''},
        {
            name: 'Actions',
            width: 60,
            enableColumnMenu: false,
            enableSorting: false,
            enableFiltering: false,
            cellTemplate: '<a href="/dms/supportform/{[{row.entity.id}]}/show" class="btn btn-primary" data-toggle="tooltip" title="Show">Show</a>',

        },
    ];

    $scope.items = ['item1', 'item2', 'item3'];
    $scope.selected = {};

    $scope.animationsEnabled = true;

    {#$scope.setDelete = function () {#}
    {#$log.log(JSON.stringify($scope.selected));#}
    {#$http.post('{{ path("servicerequest_mass_delete") }}', {'data': JSON.stringify($scope.selected)})#}
    {#.success(function (data) {#}
    {#i=1#}
    {#angular.forEach($scope.selected, function(value, key) {#}
    {#$log.log(key + ': ' + value);#}
    {#$scope.gridOptions.data.splice(key-i, 1);#}
    {#i++;#}
    {#});#}
    {#$scope.selected={}#}
    {#$scope.gridApi.selection.clearSelectedRows();#}
    {#angular.forEach(data, function(data, index) {#}
    {#data.index = index+1;#}
    {#//data.push({"index":index+1})#}
    {#})#}
    {#});#}
    {#}#}

    var canceler = $q.defer();
    $http.get('{{ apicall }}', {timeout: canceler.promise})
            .success(function (data) {
                for (i = 0; i < data.length; i++) {

                    console.log(data[i]);
                    if (data[i]._d_m_s_user != undefined) {
                        data[i].dms_user_name = data[i]._d_m_s_user._first_name + " " + data[i]._d_m_s_user._user_group.name;
                        data[i].dms_user_group = data[i]._d_m_s_user._user_group.name
                    }
                    else {
                        data[i].dms_user_name = "Dealer";
                        data[i].dms_user_group = "Dealer";
                    }
                    console.log(data[i]);
                }
                //console.log(data);
                //$scope.gridOptions.data = data;
                $scope.gridOptions.data = data;

            });

    $scope.$on('$destroy', function () {
        canceler.resolve();  // Aborts the $http request if it isn't finished.
    });

    $scope.gridOptions.onRegisterApi = function (gridApi) {
        //set gridApi on scope
        $scope.gridApi = gridApi;
        gridApi.selection.on.rowSelectionChanged($scope, function (row) {
            var msg = 'row selected ' + row.isSelected;

            $scope.selected[row.entity.index] = row.entity.id;
            $log.log(row);
        });

        gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
            var msg = 'rows changed ' + rows.length;
            $log.log(rows);
            angular.forEach(rows, function (value, key) {
                $scope.selected[value.entity.index] = value.entity.id;
            });
            console.log($scope.selected);
        });
    };

}]);
app.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, items) {

    $scope.items = items;
    $scope.selected = {
        item: $scope.items[0]
    };

    $scope.ok = function () {
        $uibModalInstance.close($scope.selected.item);
        return true;
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
});